install.packages('learnr')
i <- c(1, 2, 3, 4)
length(i)
sapply(seq(length(i)), print)
sapply(seq(length(i)), sum)
library(learnr)
library(testthat)
knitr::opts_chunk$set(echo = FALSE)
running_sum <- function(i) {
if (length(i) <= 1) {
i
} else {
sapply(seq(length(i)), function(x) { sum(i[1:x]) })
}
}
running_sum(c(1, 2, 3, 4))
library(learnr)
library(testthat)
knitr::opts_chunk$set(echo = FALSE)
# If the vector is empty or a single value, return the input, otherwise,
# for each index from 1 to the length of the input, calculate the sum
# of all numbers up to that index
running_sum <- function(i) {
if (length(i) <= 1) { i } else {
sapply(seq(length(i)), function(x) { sum(i[1:x]) })
}
}
test_that("running_sum() returns expected results", {
expect_equal(running_sum(c(1, 2, 3, 4)), c(1, 3, 6, 10))
expect_equal(running_sum(c(1, 1, 1, 1, 1)), c(1, 2, 3, 4, 5))
expect_equal(running_sum(c(3, 1, 2, 10, 1)), c(3, 4, 6, 16, 17))
expect_equal(running_sum(100), 100)
expect_equal(running_sum(integer(0)), integer(0))
})
test_that("running_sum() returns expected results", {
expect_equal(running_sum(c(1, 2, 3, 4)), c(1, 3, 6, 10))
expect_equal(running_sum(c(1, 1, 1, 1, 1)), c(1, 2, 3, 4, 5))
expect_equal(running_sum(c(3, 1, 2, 10, 1)), c(3, 4, 6, 16, 17))
expect_equal(running_sum(100), 100)
expect_equal(running_sum(integer(0)), integer(0))
})
?test_that
test_that("running_sum() returns expected results", {
expect_equal(running_sum(c(1, 2, 3, 4)), c(1, 3, 6, 10))
expect_equal(running_sum(c(1, 1, 1, 1, 1)), c(1, 2, 3, 4, 5))
expect_equal(running_sum(c(3, 1, 2, 10, 1)), c(3, 4, 6, 16, 17))
expect_equal(running_sum(100), 100)
expect_equal(running_sum(integer(0)), integer(0))
})
x <- test_that("running_sum() returns expected results", {
expect_equal(running_sum(c(1, 2, 3, 4)), c(1, 3, 6, 10))
expect_equal(running_sum(c(1, 1, 1, 1, 1)), c(1, 2, 3, 4, 5))
expect_equal(running_sum(c(3, 1, 2, 10, 1)), c(3, 4, 6, 16, 17))
expect_equal(running_sum(100), 100)
expect_equal(running_sum(integer(0)), integer(0))
})
x
rsconnect::deployApp()
rsconnect::deployApp()
rsconnect::deployApp()
rsconnect::deployApp()
