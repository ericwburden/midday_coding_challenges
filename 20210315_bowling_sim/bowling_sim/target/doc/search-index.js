var searchIndex = JSON.parse('{\
"bowling_sim":{"doc":"Write a class named “BOWLING_GAME” that has two …","i":[[0,"err","bowling_sim","Implements an error type for the bowling simulator",null,null],[3,"BowlingError","bowling_sim::err","Error type for this Bowling Game",null,null],[11,"new","","",0,[[["str",15]]]],[0,"frame","bowling_sim","Implements the Frame struct",null,null],[4,"FrameStatus","bowling_sim::frame","Enum represents the status of the frame:",null,null],[13,"Open","","",1,null],[13,"Final","","",1,null],[13,"Bonus","","",1,null],[13,"Closed","","",1,null],[3,"Frame","","Represents a single frame in a bowling game. Implements …",null,null],[11,"new","","Creates a new frame. <code>status</code> must be either …",2,[[["framestatus",4]],[["result",4],["bowlingerror",3]]]],[11,"final_frame","","Creates a new \'final\' frame.",2,[[]]],[11,"add_bonus","","Attempt to add bonus points to a frame. Returns an error …",2,[[["usize",15]],[["bowlingerror",3],["result",4]]]],[11,"bowl","","Attempts to bowl on a frame. Returns an error if …",2,[[["usize",15]],[["bowlingerror",3],["result",4]]]],[11,"pins_up","","Identifies the number of pins available to be knocked …",2,[[],[["result",4],["usize",15],["bowlingerror",3]]]],[11,"status","","Returns current status of this frame",2,[[],["framestatus",4]]],[11,"score","","Returns current score of this frame",2,[[],["usize",15]]],[8,"Game","bowling_sim","Trait to provide functions related to a bowling Game",null,null],[10,"roll","","Roll the \\\"ball\\\", knock down pins. This is the main …",3,[[["usize",15]],[["bowlingerror",3],["result",4]]]],[10,"finished","","Indicates whether the game is over, i.e. all ten frames …",3,[[],["bool",15]]],[10,"current_frame_open","","Indicates whether the current frame is still open, i.e. …",3,[[],["bool",15]]],[10,"next_frame","","Given the current state of the game, returns the next …",3,[[],[["bowlingerror",3],["result",4],["frame",3]]]],[10,"score","","Calculates and returns the current score of the game.",3,[[],["usize",15]]],[11,"from","bowling_sim::err","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","bowling_sim::frame","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"clone","bowling_sim::err","",0,[[],["bowlingerror",3]]],[11,"clone","bowling_sim::frame","",1,[[],["framestatus",4]]],[11,"default","","",2,[[]]],[11,"eq","bowling_sim::err","",0,[[["bowlingerror",3]],["bool",15]]],[11,"ne","","",0,[[["bowlingerror",3]],["bool",15]]],[11,"eq","bowling_sim::frame","",1,[[["framestatus",4]],["bool",15]]],[11,"ne","","",1,[[["framestatus",4]],["bool",15]]],[11,"fmt","bowling_sim::err","",0,[[["formatter",3]],["result",6]]],[11,"fmt","bowling_sim::frame","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","bowling_sim::err","",0,[[["formatter",3]],["result",6]]]],"p":[[3,"BowlingError"],[4,"FrameStatus"],[3,"Frame"],[8,"Game"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);