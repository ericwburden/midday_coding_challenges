dims <- dim(board)
x <- coord['x']
y <- coord['y']
print(c(x, y))
x <= dims[2] & x >= 0 & y <= dims[1] & y >= 0
}
coord_on_board(neighbors[[1]], board)
source('~/projects/midday_coding_challenges/20201201_game_of_life/conways_game_of_life.R', echo=TRUE)
for (i in c(1:8)) {
if (!coord_on_board(neighbors[[i]], board)) {
print(neighbors[[i]])
neighbors[[i]] <- NULL
}
}
for (i in c(1:8)) {
if (!coord_on_board(neighbors[[i]], board)) {
neighbors[[i]] <- NULL
}
}
for (i in c(8:1)) {
if (!coord_on_board(neighbors[[i]], board)) {
neighbors[[i]] <- NULL
}
}
neighbors <- list(
coordinate(coord['x'] - 1, coord['y'] + 1),
coordinate(coord['x'] - 1, coord['y']),
coordinate(coord['x'] - 1, coord['y'] - 1),
coordinate(coord['x']    , coord['y'] - 1),
coordinate(coord['x'] + 1, coord['y'] - 1),
coordinate(coord['x'] + 1, coord['y']),
coordinate(coord['x'] + 1, coord['y'] + 1),
coordinate(coord['x']    , coord['y'] + 1)
)
for (i in c(8:1)) {
print(i)
if (!coord_on_board(neighbors[[i]], board)) {
neighbors[[i]] <- NULL
}
}
neighbors
on_board <- lapply(neighbors, coord_on_board, board)
neighbors <- list(
coordinate(coord['x'] - 1, coord['y'] + 1),
coordinate(coord['x'] - 1, coord['y']),
coordinate(coord['x'] - 1, coord['y'] - 1),
coordinate(coord['x']    , coord['y'] - 1),
coordinate(coord['x'] + 1, coord['y'] - 1),
coordinate(coord['x'] + 1, coord['y']),
coordinate(coord['x'] + 1, coord['y'] + 1),
coordinate(coord['x']    , coord['y'] + 1)
)
on_board <- lapply(neighbors, coord_on_board, board)
View(on_board)
on_board <- sapply(neighbors, coord_on_board, board)
neighbors[on_board]
neighbors <- neighbor_coordinates(coord, board)
source('~/projects/midday_coding_challenges/20201201_game_of_life/conways_game_of_life.R', echo=TRUE)
neighbors <- neighbor_coordinates(coord, board)
source('~/projects/midday_coding_challenges/20201201_game_of_life/conways_game_of_life.R', echo=TRUE)
neighbors <- neighbor_coordinates(coord, board)
View(neighbors)
status <- function(coord, board) {
board[coord['y'], coord['x']]
}
neighbor_vals <- sapply(neighbors, status, board)
live_neighbors <- function(coord, board) {
neighbors <- neighbor_coordinates(coord, board)
neighbor_vals <- sapply(neighbors, status, board)
sum(neighbor_vals == '*')
}
live_neighbors(coordinate(1, 1))
live_neighbors(coordinate(1, 1), board)
new_board <- board
board_width <- dim(board)[2]
board_height <- dim(board)[1]
new_board <- board
?sapply
?mapply
advance_cell_operation <- function(x, y, board) {
coord <- coordinate(x, y)
cell_state <- status(coord, board)
live_neighbors <- count_live_neighbors(coord, board)
change <- NA
if (cell_state == '*' & live_neighbors < 2) { change <- kill }
if (cell_state == '*' & live_neighbors > 3) { change <- kill }
if (cell_state == '.' & live_neighbors == 3) { change <- resurrect }
change
}
change_matrix <- mapply(advance_cell_operation, seq(board_height), seq(board_width), MoreArgs = list(board = board))
neighbor_coordinates <- function(coord, board) {
neighbors <- list(
coordinate(coord['x'] - 1, coord['y'] + 1),
coordinate(coord['x'] - 1, coord['y']),
coordinate(coord['x'] - 1, coord['y'] - 1),
coordinate(coord['x']    , coord['y'] - 1),
coordinate(coord['x'] + 1, coord['y'] - 1),
coordinate(coord['x'] + 1, coord['y']),
coordinate(coord['x'] + 1, coord['y'] + 1),
coordinate(coord['x']    , coord['y'] + 1)
)
on_board <- sapply(neighbors, coord_on_board, board)
neighbors[on_board]
}
count_live_neighbors <- function(coord, board) {
neighbors <- neighbor_coordinates(coord, board)
neighbor_vals <- sapply(neighbors, status, board)
sum(neighbor_vals == '*')
}
change_matrix <- mapply(advance_cell_operation, seq(board_height), seq(board_width), MoreArgs = list(board = board))
?apply
1:2
change_matrix <- apply(board, 1:2, advance_cell_operation)
?mapply
?tapply
advance_cell_operation <- function(coord, board) {
cell_state <- status(coord, board)
live_neighbors <- count_live_neighbors(coord, board)
change <- NA
if (cell_state == '*' & live_neighbors < 2) { change <- kill }
if (cell_state == '*' & live_neighbors > 3) { change <- kill }
if (cell_state == '.' & live_neighbors == 3) { change <- resurrect }
change
}
source('~/projects/midday_coding_challenges/20201201_game_of_life/conways_game_of_life.R', echo=TRUE)
View(board)
View(board)
board[1]
board[1,1]
board[[1]]
board[1,2]
rep(seq(10))
rep(seq(10), 10)
sort(rep(seq(10), 10))
mapply(coordinate, sort(rep(seq(10), 10)), rep(seq(10), 10))
x <- mapply(coordinate, sort(rep(seq(10), 10)), rep(seq(10), 10))
View(x)
x <- mapply(coordinate, sort(rep(seq(10), 10)), rep(seq(10), 10), SIMPLIFY = T)
View(x)
x[1]
x[[1]]
typeof(x)
typeof(board)
?apply
expand.grid(c(1, 10))
expand.grid(1:10)
expand.grid(1:10, 1:10)
x <- expand.grid(1:10, 1:10)
typeof(x)
lapply(x, coordinate)
lapply(x, function(x) { coordinate(x[[1]], x[[2]]) })
x[[1]]
x[1]
View(x)
?expand.grid
as.list(x)
as.list(t(x))
y <- as.list(t(x))
t(x)
list(t(x))
?as.list
?outer
outer(seq(board_width), seq(board_height), coordinate)
outer(1:2, 1:2, coordinate)
outer(1:2, 1:2, c)
outer(1:2, 1:2, '+')
row(board)
col(board)
c(row(board), col(board))
mapply(row(board), col(board), c)
?mapply
mapply(c, row(board), col(board))
source('~/projects/midday_coding_challenges/20201201_game_of_life/conways_game_of_life.R', echo=TRUE)
change_matrix <- mapply(advance_cell_operation, row(board), col(board), MoreArgs = list(board = board))
View(change_matrix)
matrix(change_matrix, nrow = 10)
matrix(change_matrix, ncol = 10)
matrix(change_matrix, nrow = 10, byrow = F)
matrix(change_matrix, nrow = 10, byrow = T)
?mapply
board_width <- dim(board)[2]
board_height <- dim(board)[1]
changes <- mapply(
advance_cell_operation,
row(board),
col(board),
MoreArgs = list(board = board)
)
change_matrix <- matrix(changes, nrow = board_height, byrow = T)
source('~/projects/midday_coding_challenges/20201201_game_of_life/conways_game_of_life.R', echo=TRUE)
board_width <- dim(board)[2]
board_height <- dim(board)[1]
new_state_list <- mapply(
advance_cell_operation,
row(board),
col(board),
MoreArgs = list(board = board)
)
change_matrix <- matrix(new_state_list, nrow = board_height, byrow = T)
View(change_matrix)
live_coords <- list(coordinates(3, 3), coordinates(3, 4), coordinates(3,5))
live_coords <- list(coordinats(3, 3), coordinate(3, 4), coordinate(3,5))
live_coords <- list(coordinate(3, 3), coordinate(3, 4), coordinate(3,5))
#' Initializes the game board with a size of `d` x `d` with an initial set
#' of live cells given by `live_coords`
create_board <- function(d, live_coords) {
board <- matrix(rep('.', d*d), ncol = d, byrow = T)
for (coord in live_coords) {
board <- resurrect(coord, board)
}
board
}
View(board)
board <- create_board(10, live_coords)
View(board)
source('~/projects/midday_coding_challenges/20201201_game_of_life/conways_game_of_life.R', echo=TRUE)
board_width <- dim(board)[2]
board_height <- dim(board)[1]
new_state_list <- mapply(
advance_cell_operation,
row(board),
col(board),
MoreArgs = list(board = board)
)
change_matrix <- matrix(new_state_list, nrow = board_height, byrow = T)
View(change_matrix)
View(board)
View(change_matrix)
View(board)
View(change_matrix)
new_state_list <- mapply(
advance_cell_operation,
row(board),
col(board),
MoreArgs = list(board = board),
SIMPLIFY = T
)
outer(row(board), col(board), advance_cell_operation)
outer(row(board), col(board), advance_cell_operation, board)
source('~/projects/midday_coding_challenges/20201201_game_of_life/conways_game_of_life.R', echo=TRUE)
outer(row(board), col(board), advance_cell_operation, board)
source('~/projects/midday_coding_challenges/20201201_game_of_life/conways_game_of_life.R', echo=TRUE)
outer(row(board), col(board), advance_cell_operation, board)
board <- advance_board(board)
source('~/projects/midday_coding_challenges/20201201_game_of_life/conways_game_of_life.R', echo=TRUE)
board <- advance_board(board)
source('~/projects/midday_coding_challenges/20201201_game_of_life/conways_game_of_life.R', echo=TRUE)
board <- advance_board(board)
View(board)
cat(board)
print(board)
paste(board)
paste(board, sep = '\n')
board[1:20, 1]
board[1:10, 1]
board[1:10, 2]
cat_board <- function(board) {
rows <- dim(board)[1]
cols <- dim(board)[2]
sapply(seq(rows), function(x) { cat(board[1:cols, x]) } )
}
cat_board(board)
source('~/projects/midday_coding_challenges/20201201_game_of_life/conways_game_of_life.R', echo=TRUE)
cat_board(board)
source('~/projects/midday_coding_challenges/20201201_game_of_life/conways_game_of_life.R', echo=TRUE)
cat_board(board)
source('~/projects/midday_coding_challenges/20201201_game_of_life/conways_game_of_life.R', echo=TRUE)
cat_board(board)
source('~/projects/midday_coding_challenges/20201201_game_of_life/conways_game_of_life.R', echo=TRUE)
cat_board(board)
clear()
source('~/projects/midday_coding_challenges/20201201_game_of_life/conways_game_of_life.R', echo=TRUE)
cat_board(board)
source('~/projects/midday_coding_challenges/20201201_game_of_life/conways_game_of_life.R', echo=TRUE)
source('~/projects/midday_coding_challenges/20201201_game_of_life/conways_game_of_life.R', echo=TRUE)
advance_n_times(board, 10)
source('~/projects/midday_coding_challenges/20201201_game_of_life/conways_game_of_life.R', echo=TRUE)
cogl_pulsar
cogl_pulsar()
source('~/projects/midday_coding_challenges/20201201_game_of_life/conways_game_of_life.R', echo=TRUE)
cogl_pulsar()
source('~/projects/midday_coding_challenges/20201201_game_of_life/conways_game_of_life.R', echo=TRUE)
source('~/projects/midday_coding_challenges/20201201_game_of_life/conways_game_of_life.R', echo=TRUE)
cogl_pulsar()
source('~/projects/midday_coding_challenges/20201201_game_of_life/conways_game_of_life.R', echo=TRUE)
cogl_pulsar()
source('~/projects/midday_coding_challenges/20201201_game_of_life/conways_game_of_life.R', echo=TRUE)
cogl_pulsar()
cogl_pulsar()
source('~/projects/midday_coding_challenges/20201201_game_of_life/conways_game_of_life.R', echo=TRUE)
cogl_pulsar()
source('~/projects/midday_coding_challenges/20201201_game_of_life/conways_game_of_life.R', echo=TRUE)
cogl_pulsar()
source('~/projects/midday_coding_challenges/20201201_game_of_life/conways_game_of_life.R', echo=TRUE)
cogl_pulsar()
source('~/projects/midday_coding_challenges/20201201_game_of_life/conways_game_of_life.R', echo=TRUE)
cogl_pulsar()
?crayon::bgBlack
#' Colors by state
pretty_state <- function(state) {
if (state == ' ') {
crayon::silver(state)
} else {
crayon::blue(state)
}
}
apply(board, 1:2, pretty_state)
source('~/projects/midday_coding_challenges/20201201_game_of_life/conways_game_of_life.R', echo=TRUE)
cogl_pulsar()
cogl_pulsar()
cogl_pulsar()
source('~/projects/midday_coding_challenges/20201201_game_of_life/conways_game_of_life.R', echo=TRUE)
cogl_pulsar()
randomizer <- runif(board_size*board_size)
board_size <- 20
pct_alive <- .5
randomizer <- runif(board_size*board_size) <= pct_alive
randomizer <- matrix(runif(board_size*board_size) <= pct_alive, nrow = board_size)
View(randomizer)
board <- apply(randomizer, 1:2, function(x) { ifelse(x, '#', '.') })
View(board)
source('~/projects/midday_coding_challenges/20201201_game_of_life/conways_game_of_life.R', echo=TRUE)
random_seed(30, .5)
source('~/projects/midday_coding_challenges/20201201_game_of_life/conways_game_of_life.R', echo=TRUE)
source('~/projects/midday_coding_challenges/20201201_game_of_life/conways_game_of_life.R', echo=TRUE)
random_seed(30, .5)
source('~/projects/midday_coding_challenges/20201201_game_of_life/conways_game_of_life.R', echo=TRUE)
random_seed(30, .5)
source('~/projects/midday_coding_challenges/20201201_game_of_life/conways_game_of_life.R', echo=TRUE)
random_seed(30, .5)
source('~/projects/midday_coding_challenges/20201201_game_of_life/conways_game_of_life.R', echo=TRUE)
random_seed(30, .5)
source('~/projects/midday_coding_challenges/20201201_game_of_life/conways_game_of_life.R', echo=TRUE)
random_seed(30, .5)
random_seed(20, .5)
random_seed(20, .5)
cogl_pulsar()
source('~/projects/midday_coding_challenges/20201201_game_of_life/conways_game_of_life.R', echo=TRUE)
random_seed(25, .25, 1000)
cogl_pulsar(10000)
source('~/projects/midday_coding_challenges/20201201_game_of_life/conways_game_of_life.R', echo=TRUE)
random_seed(25, .5, 1000)
random_seed(50, .5, 1000)
random_seed(30, .5, 1000)
random_seed(25, .5, 1000)
remotes::install_github('coolbutuseless/cairocore')
library(cairocore)
surface <- cairo_image_surface_create (cairo_format_t$CAIRO_FORMAT_ARGB32, 500L, 500L);
cr <- cairo_create(surface)
cairo_set_source_rgb(cr, 0.9, 0.9, 1)
cairo_paint(cr)
plot(cairo_image_surface_get_raster(surface), interpolate = FALSE)
cairo_set_source_rgb(cr, 0.6, 0.6, 0.6);
cairo_set_line_width(cr, 1);
cairo_rectangle(cr, 20, 20, 120, 80);
cairo_rectangle(cr, 180, 20, 80, 80);
cairo_stroke_preserve(cr);
cairo_fill(cr);
plot(cairo_image_surface_get_raster(surface), interpolate = FALSE)
plot(cairo_image_surface_get_raster(surface), interpolate = FALSE)
plot(cairo_image_surface_get_raster(surface), interpolate = FALSE)
plot(cairo_image_surface_get_raster(surface), interpolate = FALSE)
cairo_set_source_rgb(cr, 0.6, 0.6, 0.6);
cairo_set_line_width(cr, 1);
cairo_rectangle(cr, 20, 20, 120, 80);
cairo_rectangle(cr, 180, 20, 80, 80);
cairo_stroke_preserve(cr);
cairo_fill(cr);
cairo_set_source_rgb(cr, 0.6, 0.6, 0.6);
cairo_set_line_width(cr, 1);
cairo_rectangle(cr, 20, 20, 120, 80);
cairo_rectangle(cr, 180, 20, 80, 80);
cairo_stroke_preserve(cr);
cairo_fill(cr);
cairo_set_source_rgb(cr, 0.6, 0.6, 0.6);
cairo_set_line_width(cr, 1);
cairo_rectangle(cr, 20, 20, 120, 80);
cairo_rectangle(cr, 180, 20, 80, 80);
cairo_stroke_preserve(cr);
cairo_fill(cr);
cairo_set_source_rgb(cr, 0.6, 0.6, 0.6);
cairo_set_line_width(cr, 1);
cairo_rectangle(cr, 20, 20, 120, 80);
cairo_rectangle(cr, 180, 20, 80, 80);
cairo_stroke_preserve(cr);
cairo_fill(cr);
cairo_set_source_rgb(cr, 0.6, 0.6, 0.6);
cairo_set_line_width(cr, 1);
cairo_rectangle(cr, 20, 20, 120, 80);
cairo_rectangle(cr, 180, 20, 80, 80);
cairo_stroke_preserve(cr);
cairo_fill(cr);
cairo_set_source_rgb(cr, 0.6, 0.6, 0.6);
cairo_set_line_width(cr, 1);
cairo_rectangle(cr, 20, 20, 120, 80);
cairo_rectangle(cr, 180, 20, 80, 80);
cairo_stroke_preserve(cr);
cairo_fill(cr);
cairo_set_source_rgb(cr, 0.6, 0.6, 0.6);
cairo_set_line_width(cr, 1);
cairo_rectangle(cr, 20, 20, 120, 80);
cairo_rectangle(cr, 180, 20, 80, 80);
cairo_stroke_preserve(cr);
cairo_fill(cr);
cairo_set_source_rgb(cr, 0.6, 0.6, 0.6);
cairo_set_line_width(cr, 1);
cairo_rectangle(cr, 20, 20, 120, 80);
cairo_rectangle(cr, 180, 20, 80, 80);
cairo_stroke_preserve(cr);
cairo_fill(cr);
cairo_set_source_rgb(cr, 0.6, 0.6, 0.6);
cairo_set_line_width(cr, 1);
cairo_rectangle(cr, 20, 20, 120, 80);
cairo_rectangle(cr, 180, 20, 80, 80);
cairo_stroke_preserve(cr);
cairo_fill(cr);
plot(cairo_image_surface_get_raster(surface), interpolate = FALSE)
plot(cairo_image_surface_get_raster(surface), interpolate = FALSE)
plot(cairo_image_surface_get_raster(surface), interpolate = FALSE)
plot(cairo_image_surface_get_raster(surface), interpolate = FALSE)
cairo_set_source_rgb(cr, 0.6, 0.6, 0.6);
cairo_set_line_width(cr, 1);
cairo_rectangle(cr, 20, 20, 120, 80);
cairo_rectangle(cr, 180, 20, 80, 80);
cairo_stroke_preserve(cr);
cairo_fill(cr);
cairo_set_source_rgb(cr, 0.6, 0.6, 0.6);
cairo_set_line_width(cr, 1);
cairo_rectangle(cr, 20, 20, 120, 80);
cairo_rectangle(cr, 180, 20, 80, 80);
cairo_stroke_preserve(cr);
cairo_fill(cr);
cairo_set_source_rgb(cr, 0.6, 0.6, 0.6);
cairo_set_line_width(cr, 1);
cairo_rectangle(cr, 20, 20, 120, 80);
cairo_rectangle(cr, 180, 20, 80, 80);
cairo_stroke_preserve(cr);
cairo_fill(cr);
cairo_set_source_rgb(cr, 0.6, 0.6, 0.6);
cairo_set_line_width(cr, 1);
cairo_rectangle(cr, 20, 20, 120, 80);
cairo_rectangle(cr, 180, 20, 80, 80);
cairo_stroke_preserve(cr);
cairo_fill(cr);
cairo_set_source_rgb(cr, 0.6, 0.6, 0.6);
cairo_set_line_width(cr, 1);
cairo_rectangle(cr, 20, 20, 120, 80);
cairo_rectangle(cr, 180, 20, 80, 80);
cairo_stroke_preserve(cr);
cairo_fill(cr);
cairo_set_source_rgb(cr, 0.6, 0.6, 0.6);
cairo_set_line_width(cr, 1);
cairo_rectangle(cr, 20, 20, 120, 80);
cairo_rectangle(cr, 180, 20, 80, 80);
cairo_stroke_preserve(cr);
cairo_fill(cr);
cairo_set_source_rgb(cr, 0.6, 0.6, 0.6);
cairo_set_line_width(cr, 1);
cairo_rectangle(cr, 20, 20, 120, 80);
cairo_rectangle(cr, 180, 20, 80, 80);
cairo_stroke_preserve(cr);
cairo_fill(cr);
cairo_set_source_rgb(cr, 0.6, 0.6, 0.6);
cairo_set_line_width(cr, 1);
cairo_rectangle(cr, 20, 20, 120, 80);
cairo_rectangle(cr, 180, 20, 80, 80);
cairo_stroke_preserve(cr);
cairo_fill(cr);
cairo_set_source_rgb(cr, 0.6, 0.6, 0.6);
cairo_set_line_width(cr, 1);
cairo_rectangle(cr, 20, 20, 120, 80);
cairo_rectangle(cr, 180, 20, 80, 80);
cairo_stroke_preserve(cr);
cairo_fill(cr);
cairo_set_source_rgb(cr, 0.6, 0.6, 0.6);
cairo_set_line_width(cr, 1);
cairo_rectangle(cr, 20, 20, 120, 80);
cairo_rectangle(cr, 180, 20, 80, 80);
cairo_stroke_preserve(cr);
cairo_fill(cr);
cairo_set_source_rgb(cr, 0.6, 0.6, 0.6);
cairo_set_line_width(cr, 1);
cairo_rectangle(cr, 20, 20, 120, 80);
cairo_rectangle(cr, 180, 20, 80, 80);
cairo_stroke_preserve(cr);
cairo_fill(cr);
cairo_set_source_rgb(cr, 0.6, 0.6, 0.6);
cairo_set_line_width(cr, 1);
cairo_rectangle(cr, 20, 20, 120, 80);
cairo_rectangle(cr, 180, 20, 80, 80);
cairo_stroke_preserve(cr);
cairo_fill(cr);
plot(cairo_image_surface_get_raster(surface), interpolate = FALSE)
cairo_set_source_rgb(cr, 0.6, 0.6, 0.6);
cairo_set_line_width(cr, 1);
cairo_rectangle(cr, 20, 20, 120, 80);
cairo_rectangle(cr, 180, 20, 80, 80);
cairo_stroke_preserve(cr);
cairo_fill(cr);
plot(cairo_image_surface_get_raster(surface), interpolate = FALSE)
plot(cairo_image_surface_get_raster(surface), interpolate = FALSE)
plot(cairo_image_surface_get_raster(surface), interpolate = FALSE)
plot(cairo_image_surface_get_raster(surface), interpolate = FALSE)
plot(cairo_image_surface_get_raster(surface), interpolate = FALSE)
plot(cairo_image_surface_get_raster(surface), interpolate = FALSE)
plot(cairo_image_surface_get_raster(surface), interpolate = FALSE)
plot(cairo_image_surface_get_raster(surface), interpolate = FALSE)
plot(cairo_image_surface_get_raster(surface), interpolate = FALSE)
plot(cairo_image_surface_get_raster(surface), interpolate = FALSE)
plot(cairo_image_surface_get_raster(surface), interpolate = FALSE)
plot(cairo_image_surface_get_raster(surface), interpolate = FALSE)
plot(cairo_image_surface_get_raster(surface), interpolate = FALSE)
