addends_in_list <- function(l, k) {
diffs <- k - l
all(sapply(diffs, '%in%', l))
}
addends_in_list(c(10, 15, 3, 7), 17)
addends_in_list <- function(l, k) {
diffs <- k - l
any(sapply(diffs, '%in%', l))
}
addends_in_list(c(10, 15, 3, 7), 17)
addends_in_list(c(5, 4, 9, 21, 16), 3)
addends_in_list(c(4, 6, 8, 10, 6), 8)
addends_in_list <- function(l, k) {
doubles_check <- k /2 %in% l
diffs <- k - l
in_list <- sapply(diffs, '%in%', l)
if (doubles_check) {
sum(in_list) > 1
} else {
any(in_list)
}
}
addends_in_list(c(4, 6, 8, 10, 6), 8)
addends_in_list(c(4, 6, 8, 10, 6, 4), 8)
addends_in_list(c(5, 4, 9, 21, 16), 3)
addends_in_list(c(10, 15, 3, 7), 17)
5 %/% 2
x <- c(1, 2, 3, 4, 5)
x[!5]
x[x != 5]
x[x != 4/2]
addends_in_list <- function(l, k) {
#' The strategy is to construct a new list, `diffs`, subtracting every
#' element in list `l` from `k`, then checking whether any item in `diffs`
#' is in `l`. There is an edge case where, if the item in list `l` is exactly
#' `k/2`, then it will satisfy this check on its own. If `k/2` is in `l`
#' twice, then return true, otherwise remove `k/2` from `l` and proceed.
if (length(l[l == k/2]) > 1) { return(TRUE) }
diffs <- k - l[l != k/2]
any(sapply(diffs, '%in%', l))
}
test_cases <- list(
list(input = list(l = c(10, 15, 3, 7),    k = 17), output = TRUE),
list(input = list(l = c(5, 4, 9, 21, 16), k = 3),  output = FALSE),
list(input = list(l = c(4, 6, 8, 10, 6),  k = 8),  output = FALSE),
list(input = list(l = c(4, 6, 8, 10, 4),  k = 8),  output = TRUE)
)
run_test <- function(c, f) {
do.call(f, c$input) == c$output
}
sapply(test_cases, run_test)
sapply(test_cases, run_test, addends_in_list)
test_cases <- list(
list(input = list(l = c(10, 15, 3, 7),    k = 17), output = TRUE),
list(input = list(l = c(5, 4, 9, 21, 16), k = 3),  output = TRUE),
list(input = list(l = c(4, 6, 8, 10, 6),  k = 8),  output = FALSE),
list(input = list(l = c(4, 6, 8, 10, 4),  k = 8),  output = TRUE)
)
run_test <- function(c, f) {
pass <- do.call(f, c$input) == c$output
if (!pass) {
msg <- paste(f, 'failed test case:', c)
stop(msg)
}
}
sapply(test_cases, run_test, addends_in_list)
str(addends_in_list)
substitute(addends_in_list)
run_test <- function(c, f) {
pass <- do.call(f, c$input) == c$output
if (!pass) {
msg <- paste(substitute(f), 'failed test case:', c)
stop(msg)
}
}
sapply(test_cases, run_test, addends_in_list)
run_test(test_cases[[1]], addends_in_list)
run_test(test_cases[[2]], addends_in_list)
run_test <- function(c, f) {
pass <- do.call(f, c$input) == c$output
if (!pass) {
msg <- paste(substitute(f), 'failed test case:', str(c))
stop(msg)
}
}
sapply(test_cases, run_test, addends_in_list)
?str
run_test <- function(c, f) {
pass <- do.call(f, c$input) == c$output
if (!pass) {
msg <- paste(substitute(f), 'failed test case:', capture.output(str(c)))
stop(msg)
}
}
sapply(test_cases, run_test, addends_in_list)
x <- list(input = list(l = c(10, 15, 3, 7),    k = 17), output = TRUE)
str(x)
run_test <- function(c, f) {
pass <- do.call(f, c$input) == c$output
if (!pass) {
msg <- paste(substitute(f), 'failed test case:', cat(capture.output(str(c))))
stop(msg)
}
}
sapply(test_cases, run_test, addends_in_list)
x$input
paste0('l = ', x$input$l, '; k = ', x$input$k)
paste0('l = ', paste(x$input$l, collapse = ', '), '; k = ', x$input$k)
paste0('l = [', paste(x$input$l, collapse = ', '), ']; k = ', x$input$k)
pprint <- function(c){
paste(
'input(l = [',
paste(c$input$l, collapse = ', '),
']; k = ',
c$input$k,
'), output(',
c$output,
')'
)
}
run_test <- function(c, f) {
pass <- do.call(f, c$input) == c$output
if (!pass) {
msg <- paste(substitute(f), 'failed test case:', pprint(c))
stop(msg)
}
}
sapply(test_cases, run_test, addends_in_list)
pprint <- function(c){
paste0(
'input(l = [',
paste(c$input$l, collapse = ', '),
']; k = ',
c$input$k,
'), output(',
c$output,
')'
)
}
sapply(test_cases, run_test, addends_in_list)
pprint <- function(c){
paste0(
'input: l = [',
paste(c$input$l, collapse = ', '),
']; k = ',
c$input$k,
', output: ',
c$output,
')'
)
}
sapply(test_cases, run_test, addends_in_list)
pprint <- function(c){
paste0(
'input: l = [',
paste(c$input$l, collapse = ', '),
'], k = ',
c$input$k,
'; output: ',
c$output,
')'
)
}
sapply(test_cases, run_test, addends_in_list)
pprint <- function(c){
paste0(
'input: l = [', paste(c$input$l, collapse = ', '),'], k = ', c$input$k,
'; output: ', c$output
)
}
run_test <- function(c, f) {
pass <- do.call(f, c$input) == c$output
if (!pass) {
msg <- paste(substitute(f), 'failed test case:', pprint(c))
stop(msg)
}
}
sapply(test_cases, run_test, addends_in_list)
source('~/projects/midday_coding_challenges/20201024_addends_in_list/addends_in_list.R')
source('~/projects/midday_coding_challenges/20201024_addends_in_list/addends_in_list.R')
sapply(test_cases, run_test, addends_in_list)
run_test <- function(c, f) {
pass <- do.call(f, c$input) == c$output
if (!pass) {
msg <- paste(substitute(f), 'failed test case:', pprint(c))
stop(msg)
}
return(pass)
}
if (all(sapply(test_cases, run_test, addends_in_list))) {
print('All tests cases passed!')
}
source('~/projects/midday_coding_challenges/20201024_addends_in_list/addends_in_list.R')
source('~/projects/midday_coding_challenges/20201024_addends_in_list/addends_in_list.R')
source('~/projects/midday_coding_challenges/20201024_addends_in_list/addends_in_list.R')
source('~/projects/midday_coding_challenges/20201024_addends_in_list/addends_in_list.R')
source('~/projects/midday_coding_challenges/20201024_addends_in_list/addends_in_list.R')
source('~/projects/midday_coding_challenges/20201024_addends_in_list/addends_in_list.R')
source('~/projects/midday_coding_challenges/20201024_addends_in_list/addends_in_list.R')
crayon
??crayon
source('~/projects/midday_coding_challenges/20201024_addends_in_list/addends_in_list.R')
source('~/projects/midday_coding_challenges/20201024_addends_in_list/addends_in_list.R')
?cat
source('~/projects/midday_coding_challenges/20201024_addends_in_list/addends_in_list.R')
source('~/projects/midday_coding_challenges/20201024_addends_in_list/addends_in_list.R')
