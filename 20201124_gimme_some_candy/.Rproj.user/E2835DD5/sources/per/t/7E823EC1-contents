---
title: "Gimme Some Candy!"
output: learnr::tutorial
runtime: shiny_prerendered
---

```{r setup, include=FALSE}
library(learnr)
library(testthat)
knitr::opts_chunk$set(echo = TRUE)
```

# Challenge

Given the array `candies` and the integer `extraCandies`, where `candies[i]` 
represents the number of candies that the ith kid has:

For each kid check if there is a way to distribute `extraCandies` among the 
kids such that he or she can have the greatest number of candies among them. 
Notice that multiple kids can have the greatest number of candies.

**Example 1:**
```
Input: candies = [2,3,5,1,3], extraCandies = 3
Output: [true,true,true,false,true] 

Explanation: 
Kid 1 has 2 candies and if he or she receives all extra candies (3) will have 5 
candies --- the greatest number of candies among the kids. 
Kid 2 has 3 candies and if he or she receives at least 2 extra candies will have 
the greatest number of candies among the kids. 
Kid 3 has 5 candies and this is already the greatest number of candies among the 
kids. 
Kid 4 has 1 candy and even if he or she receives all extra candies will only 
have 4 candies. 
Kid 5 has 3 candies and if he or she receives at least 2 extra candies will 
have the greatest number of candies among the kids. 
```

**Example 2:**
```
Input: candies = [4,2,1,1,2], extraCandies = 1
Output: [true,false,false,false,false] 

Explanation: There is only 1 extra candy, therefore only kid 1 will have the 
greatest number of candies among the kids regardless of who takes the extra 
candy.
```

**Example 3:**
```
Input: candies = [12,1,12], extraCandies = 10
Output: [true,false,true]
```
 
**Constraints:**

- `2 <= candies.length <= 100`
- `1 <= candies[i] <= 100`
- `1 <= extraCandies <= 50`

## Implementation

```{r implementation}
# Check for whole (integer) numbers
is.whole <- function(n) {
  if (is.numeric(n)) { (n %% 1) == 0 } else { F }
}

# Ensure arguments fit the given constraints. Added additional constraints for
# type-checking and length-checking
check_constraints <- function(candies, extra_candies) {
  msg <- character(0)
  
  if (!is.whole(candies)) { 
    msg <- c(msg, '`candies` must be an integer vector') 
  }
  if (!is.whole(extra_candies)) { 
    msg <- c(msg, '`extra_candies` must be an integer vector') 
  }
  if (length(extra_candies) > 1) { 
    msg <- c(msg, '`extra_candies` should be a 1-length vector') 
  }
  if (length(candies) < 2 | length(candies) > 100) {
    msg <- c(msg, '`candies` should contain between 2 and 100 elements')
  }
  if (is.whole(candies) & any(candies < 1 | candies > 100)) {
    msg <- c(msg, 'each value of `candies` should be between 1 and 100')
  }
  if (is.whole(extra_candies) & extra_candies < 1 | extra_candies > 50) {
    msg <- c(msg, '`extra_candies` should be between 1 and 50')
  }
  if (length(msg) > 0) {
    stop(paste(msg, collapse = '; '))
  }
}

gimme_some_candy <- function(candies, extra_candies) {
  check_constraints(candies, extra_candies)
  max_candies <- max(candies)  # Current maximum number of candies
  
  # Add the extra candies to each child and check to see if it's at least
  # equal to the prior maximum
  (candies + extra_candies) >= max_candies
}
```

## Tests

### Test Operation 

*Modify the tests to see the results*

Tests to ensure the `gimme_some_candy()` function returns expected results:

```{r expected_results, exercise=TRUE}
test_result <- test_that("`gimme_some_candy returns expected results`", {
  expect_identical(gimme_some_candy(c(2, 3, 5, 1, 3), 3), c(T, T, T, F, T))
  expect_identical(gimme_some_candy(c(4, 2, 1, 1, 2), 1), c(T, F, F, F, F))
  expect_identical(gimme_some_candy(c(12, 1, 12), 10), c(T, F, T))
})

if (test_result) { cat('SUCCESS!!') }
```


### Test Errors 

*Modify the tests to see the results*

Tests to ensure the `gimme_some_candy()` function returns expected errors:

```{r expected_errors, exercise=TRUE}
test_result <- test_that("`gimme_some_candy returns expected errors`", {
  expect_error(gimme_some_candy(c('a'), 3), '`candies` must be an integer vector')
  expect_error(gimme_some_candy(c(1, 2), '3'), '`extra_candies` must be an integer vector')
  expect_error(gimme_some_candy(c(1, 2), c(1, 2)), '`extra_candies` should be a 1-length vector')
  expect_error(gimme_some_candy(1, 3), '`candies` should contain between 2 and 100 elements')
  expect_error(gimme_some_candy(rep(1, 102), 3), '`candies` should contain between 2 and 100 elements')
  expect_error(gimme_some_candy(c(1, 102), 3), 'each value of `candies` should be between 1 and 100')
  expect_error(gimme_some_candy(c(1, -5), 3), 'each value of `candies` should be between 1 and 100')
  expect_error(gimme_some_candy(c(3, 7, 9), 0), '`extra_candies` should be between 1 and 50')
  expect_error(gimme_some_candy(c(3, 7, 9), 100), '`extra_candies` should be between 1 and 50')
})

if (test_result) { cat('SUCCESS!!') }
```