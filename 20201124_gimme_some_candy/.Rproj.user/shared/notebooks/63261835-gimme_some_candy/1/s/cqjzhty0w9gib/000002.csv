"0","# Check for whole (integer) numbers"
"0","is.whole <- function(n) {"
"0","  if (is.numeric(n)) { (n %% 1) == 0 } else { F }"
"0","}"
"0",""
"0","# Ensure arguments fit the given constraints. Added additional constraints for"
"0","# type-checking and length-checking"
"0","check_constraints <- function(candies, extra_candies) {"
"0","  msg <- character(0)"
"0","  "
"0","  if (!is.whole(candies)) { "
"0","    msg <- c(msg, '`candies` must be an integer vector') "
"0","  }"
"0","  if (!is.whole(extra_candies)) { "
"0","    msg <- c(msg, '`extra_candies` must be an integer vector') "
"0","  }"
"0","  if (length(extra_candies) > 1) { "
"0","    msg <- c(msg, '`extra_candies` should be a 1-length vector') "
"0","  }"
"0","  if (length(candies) < 2 | length(candies) > 100) {"
"0","    msg <- c(msg, '`candies` should contain between 2 and 100 elements')"
"0","  }"
"0","  if (is.whole(candies) & any(candies < 1 | candies > 100)) {"
"0","    msg <- c(msg, 'each value of `candies` should be between 1 and 100')"
"0","  }"
"0","  if (is.whole(extra_candies) & extra_candies < 1 | extra_candies > 50) {"
"0","    msg <- c(msg, '`extra_candies` should be between 1 and 50')"
"0","  }"
"0","  if (length(msg) > 0) {"
"0","    stop(paste(msg, collapse = '; '))"
"0","  }"
"0","}"
"0",""
"0","gimme_some_candy <- function(candies, extra_candies) {"
"0","  check_constraints(candies, extra_candies)"
"0","  max_candies <- max(candies)  # Current maximum number of candies"
"0","  "
"0","  # Add the extra candies to each child and check to see if it's at least"
"0","  # equal to the prior maximum"
"0","  (candies + extra_candies) >= max_candies"
"0","}"
