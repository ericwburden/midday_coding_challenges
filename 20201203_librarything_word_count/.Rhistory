library(stringr)
input <- "That interviews should involve simple code is now common wisdom in programming circles. The story is that a high percentage of programmers, even people with impressive resumes, “just can’t code.” Asked to do the simplest things—problems a good coders could solve as fast they could write—some spend ten or twenty minutes before they get an answer, or fail entirely. (See discussion by Jeff Attwood and Joel Spolsky.) I don’t go as far as others here. I think a lot of “slow coders” are probably excellent employees, making up for it in other areas. Some projects don’t need speed. Some people just need to spend more time programming; everyone was a slow programmer some time. But I know from experience that slow coders don’t work at LibraryThing. They don’t fit the LibraryThing development culture."
str_remove_all(input, '[^\\w]')
words <- str_split(str_remove_all(input, '[^\\w ]'), ' ')
words <- str_split(str_remove_all(input, '[^\\w ]'), ' ')[[1]]
lengths <- nchar(words)
sort(lengths)
current_count <- 0
last_l <- 0
for (l in sort(lengths)) {
if (last_l > 0 & l != last_l) {
print(glue::glue('{current_count} words with {l} letter(s)'))
current_count <- 0
}
current_count <- current_count + 1
}
for (l in sort(lengths)) {
if (last_l > 0 & l != last_l) {
print(glue::glue('{current_count} words with {l} letter(s)'))
current_count <- 0
}
last_l <- l
current_count <- current_count + 1
}
for (l in sort(lengths)) {
if (last_l > 0 & l != last_l) {
print(glue::glue('{current_count} words with {l} letter(s)'))
current_count <- 0
}
last_l <- l
current_count <- current_count + 1
print(c(last_l, current_count))
}
source('~/projects/midday_coding_challenges/20201203_librarything_word_count/count_words_by_length.R', echo=TRUE)
source('~/projects/midday_coding_challenges/20201203_librarything_word_count/count_words_by_length.R', echo=TRUE)
t <- tibble(words = str_split(str_remove_all(input, '[^\\w ]'), ' '))
library(tidyverse)
t <- tibble(words = str_split(str_remove_all(input, '[^\\w ]'), ' '))
t <- tibble(words = str_split(str_remove_all(input, '[^\\w ]'), ' ')[[1]])
t <- tibble(words = str_split(str_remove_all(input, '[^\\w ]'), ' ')[[1]]) %>%
mutate(lengths = length(words)) %>%
group_by(length) %>%
tally()
t <- tibble(words = str_split(str_remove_all(input, '[^\\w ]'), ' ')[[1]]) %>%
mutate(lengths = length(words)) %>%
group_by(lengths) %>%
tally()
t <- tibble(words = str_split(str_remove_all(input, '[^\\w ]'), ' ')[[1]]) %>%
mutate(lengths = nchar(words)) %>%
group_by(lengths) %>%
tally()
t <- tibble(words = str_split(str_remove_all(input, '[^\\w ]'), ' ')[[1]]) %>%
mutate(lengths = nchar(words)) %>%
group_by(lengths) %>%
tally() %>%
arrange(lengths)
library(tidyverse)
input <- "That interviews should involve simple code is now common wisdom in programming circles. The story is that a high percentage of programmers, even people with impressive resumes, “just can’t code.” Asked to do the simplest things—problems a good coders could solve as fast they could write—some spend ten or twenty minutes before they get an answer, or fail entirely. (See discussion by Jeff Attwood and Joel Spolsky.) I don’t go as far as others here. I think a lot of “slow coders” are probably excellent employees, making up for it in other areas. Some projects don’t need speed. Some people just need to spend more time programming; everyone was a slow programmer some time. But I know from experience that slow coders don’t work at LibraryThing. They don’t fit the LibraryThing development culture."
t <- tibble(words = str_split(str_remove_all(input, '[^\\w ]'), ' ')[[1]]) %>%
mutate(lengths = nchar(words)) %>%
group_by(lengths) %>%
tally() %>%
arrange(lengths)
for (i in nrow(t)) {
print(glue::glue('{i$n} words of length {i$lengths}'))
}
library(tidyverse)
input <- "That interviews should involve simple code is now common wisdom in programming circles. The story is that a high percentage of programmers, even people with impressive resumes, “just can’t code.” Asked to do the simplest things—problems a good coders could solve as fast they could write—some spend ten or twenty minutes before they get an answer, or fail entirely. (See discussion by Jeff Attwood and Joel Spolsky.) I don’t go as far as others here. I think a lot of “slow coders” are probably excellent employees, making up for it in other areas. Some projects don’t need speed. Some people just need to spend more time programming; everyone was a slow programmer some time. But I know from experience that slow coders don’t work at LibraryThing. They don’t fit the LibraryThing development culture."
t <- tibble(words = str_split(str_remove_all(input, '[^\\w ]'), ' ')[[1]]) %>%
mutate(lengths = nchar(words)) %>%
group_by(lengths) %>%
tally() %>%
arrange(lengths)
for (i in nrow(t)) {
print(glue::glue('{t$n[[i]]} words of length {t$lengths[[i]]}'))
}
library(tidyverse)
input <- "That interviews should involve simple code is now common wisdom in programming circles. The story is that a high percentage of programmers, even people with impressive resumes, “just can’t code.” Asked to do the simplest things—problems a good coders could solve as fast they could write—some spend ten or twenty minutes before they get an answer, or fail entirely. (See discussion by Jeff Attwood and Joel Spolsky.) I don’t go as far as others here. I think a lot of “slow coders” are probably excellent employees, making up for it in other areas. Some projects don’t need speed. Some people just need to spend more time programming; everyone was a slow programmer some time. But I know from experience that slow coders don’t work at LibraryThing. They don’t fit the LibraryThing development culture."
t <- tibble(words = str_split(str_remove_all(input, '[^\\w ]'), ' ')[[1]]) %>%
mutate(lengths = nchar(words)) %>%
group_by(lengths) %>%
tally() %>%
arrange(lengths)
for (i in seq(nrow(t))) {
print(glue::glue('{t$n[[i]]} words of length {t$lengths[[i]]}'))
}
source('~/projects/midday_coding_challenges/20201203_librarything_word_count/count_words_by_length.R', echo=TRUE)
source('~/projects/midday_coding_challenges/20201203_librarything_word_count/count_words_by_length.R', echo=TRUE)
source('~/projects/midday_coding_challenges/20201203_librarything_word_count/count_words_by_length.R', echo=TRUE)
